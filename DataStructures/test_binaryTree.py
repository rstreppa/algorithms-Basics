# -*- coding: utf-8 -*-
""" 
@date:          Sun Jan  9 13:58:48 2022
@author:        rstreppa ( roberto.strepparava@gmail.com )
@company:       https://github.com/rstreppa
@type:          test
@description:   test file for script C:/Users/rober/OneDrive/Documents/Library/Programming/Data_Structures/BinaryTree/binaryTree.py
"""


from binaryTree import Node, postOrder, inOrder, preOrder, height, givenLevel, levelOrder, levelOrder_queue, inOrder_stack, maxDepth, diameter
from binaryTree import Nodep, depth, lcap
from binaryTree import averageOfLevels, height2, givenLevel2, levelOrder2, averageOfLevels2, averageOfLevels3
from binaryTree import minDepth, minDepth2
from binaryTree import isSameTree, binaryTreePaths, mergeTrees, isSubtree, invertTree, invertTreeIterative

def main():
    # Driver code to build binary tree
    root            = Node(1)
    root.left       = Node(2)
    root.right      = Node(3)
    root.left.left  = Node(4)
    root.left.right = Node(5)    

    print('###################')
    postOrder( root )
    print()
    print('###################')
    inOrder( root )
    print()
    print('###################')
    print( inOrder_stack( root ) )
    print('###################')
    preOrder( root )
    print('###################')
    print( height( root ) )
    print('###################')
    givenLevel(root, 3)
    print()
    givenLevel(root, 2)
    print()
    givenLevel(root, 1)
    print()
    givenLevel(root, 0)
    print('###################')
    levelOrder( root )
    print('###################')
    levelOrder_queue( root )
    print('###################')
    print( maxDepth( root ) )
    print('###################')
    print( diameter( root ) )
    print('###################')
    # Driver code to build binary tree with parent pointer
    root                    = Nodep(1)
    root.left               = Nodep(2)
    root.left.parent        = root
    root.right              = Nodep(3)
    root.right.parent       = root
    root.left.left          = Nodep(4)
    root.left.left.parent   = root.left
    root.left.right         = Nodep(5)
    root.left.right.parent  = root.left
    print(depth(root.left.right))
    r = lcap(root.left.left, root.right)
    print(r.data)
    print('#### averageOfLevels averageOfLevels2 averageOfLevels3 #########################')
    root                = Node(3)
    root.left           = Node(9)
    root.right          = Node(20)
    root.right.left     = Node(15)
    root.right.right    = Node(7)
    print(height2(root))
    res = []
    givenLevel2(root, 3, res)
    print(res)
    print( levelOrder2(root) )
    print(averageOfLevels(root))
    print(averageOfLevels2(root))
    print(averageOfLevels3(root))
    root                = Node(3)
    root.left           = Node(9)
    root.right          = Node(20)
    root.left.left      = Node(15)
    root.left.right     = Node(7)
    print(averageOfLevels(root))
    print(averageOfLevels2(root))     
    print(averageOfLevels3(root))
    print('#### minDepth minDepth2 #########################')
    root                = Node(3)
    root.left           = Node(9)
    root.right          = Node(20)
    root.right.left     = Node(15)
    root.right.right    = Node(7)
    print(minDepth(root))
    print(minDepth2(root))
    root                        = Node(2)
    root.left                   = Node(3)
    root.left.left              = Node(4)
    root.left.left.left         = Node(5)
    root.left.left.left.left    = Node(6)
    print(minDepth(root))
    print(minDepth2(root))
    print('#### isSameTree #########################')
    root1                       = Node(1)
    root1.left                  = Node(2)
    root1.right                 = Node(3)
    root2                       = Node(1)
    root2.left                  = Node(2)
    root2.right                 = Node(3)
    print(isSameTree(root1, root2))
    root1                       = Node(1)
    root1.left                  = Node(2)
    root2                       = Node(1)
    root2.right                 = Node(2)
    print(isSameTree(root1, root2))
    root1                       = Node(1)
    root1.left                  = Node(2)
    root1.right                 = Node(1)
    root2                       = Node(1)
    root2.left                  = Node(1)
    root2.right                 = Node(2)
    print(isSameTree(root1, root2))
    print('#### binaryTreePaths #########################')
    root                        = Node(1)
    root.left                   = Node(2)
    root.right                  = Node(3)
    print(binaryTreePaths(root))
    root            = Node(1)
    root.left       = Node(2)
    root.right      = Node(3)
    root.left.left  = Node(4)
    root.left.right = Node(5)    
    print(binaryTreePaths(root))
    print('#### mergeTrees #########################')
    root1               = Node(1)
    root1.left          = Node(3)
    root1.left.left     = Node(5)
    root1.right         = Node(2)
    root2               = Node(2)
    root2.left          = Node(1)
    root2.left.right    = Node(4)
    root2.right         = Node(3)
    root2.right.right   = Node(7)
    root                = mergeTrees(root1, root2)
    print(preOrder( root1 ))
    print(preOrder( root2 ))
    print(preOrder( root ))
    root1               = Node(1)
    root2               = Node(1)
    root2.left          = Node(2)
    root                = mergeTrees(root1, root2)
    print(preOrder( root1 ))
    print(preOrder( root2 ))
    print(preOrder( root ))
    print('#### isSubtree #########################')
    root                = Node(3)
    root.left           = Node(4)
    root.left.left      = Node(1)
    root.left.right     = Node(2)
    root.right          = Node(5)
    subRoot             = Node(4)
    subRoot.left        = Node(1)
    subRoot.right       = Node(2)
    print(isSubtree(root, subRoot))
    root                = Node(3)
    root.left           = Node(4)
    root.left.left      = Node(1)
    root.left.right     = Node(2)
    root.left.right.left= Node(0)
    root.right          = Node(5)
    subRoot             = Node(4)
    subRoot.left        = Node(1)
    subRoot.right       = Node(2)
    print(isSubtree(root, subRoot))
    print('#### invertTree invertTreeIterative #########################')
    root                = Node(4)
    root.left           = Node(2)
    root.left.left      = Node(1)
    root.left.right     = Node(3)
    root.right          = Node(7)
    root.right.left     = Node(6)
    root.right.right    = Node(9)
    print(preOrder( root ))
    print(preOrder( invertTree(root) ))
    print(preOrder( invertTreeIterative(root) ))
    root                = Node(2)
    root.left           = Node(1)
    root.right          = Node(3)
    print(preOrder( root ))
    print(preOrder( invertTree(root) ))
    print(preOrder( invertTreeIterative(root) ))
    root                = None
    print(preOrder( root ))
    print(preOrder( invertTree(root) ))
    print(preOrder( invertTreeIterative(root) ))
